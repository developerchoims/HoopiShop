name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create application.yml from encoded secret
        env:
          PROP: ${{ secrets.PROPERTIES }}
        run: |
          mkdir -p ./hoopi/src/main/resources
          echo "$PROP" | base64 --decode > ./hoopi/src/main/resources/application.yml
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_ID }}
          password: ${{ secrets.DOCKER_PWD }}

      - name: Build and push React Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./hoopifront
          file: ./hoopifront/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_REPO }}/my-react-app:latest

      - name: Build and push Spring Boot Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./hoopi
          file: ./hoopi/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_REPO }}/my-spring-boot-app:latest

      - name: Build and push Nginx Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_REPO }}/my-nginx:latest
          
      - name: Deploy to EC2
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          echo "$SSH_KEY" > /tmp/id_rsa
          chmod 600 /tmp/id_rsa
          ssh -o StrictHostKeyChecking=no -i /tmp/id_rsa ec2-user@$SSH_HOST << 'EOF'
            cd /home/ec2-user/jwtProject
            docker-compose down --remove-orphans
            docker-compose pull
            docker-compose build
            docker-compose up -d
            # Wait until the spring container is ready
            until docker-compose exec spring curl -sSf http://localhost:8080/health; do
              echo "Waiting for the spring container to be ready..."
              sleep 5
            done
            
            # Once ready, print the application.yml file
            docker-compose exec spring cat /app/application.yml
          EOF
